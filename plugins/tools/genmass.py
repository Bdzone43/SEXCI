import json
import requests
import random
import time
import re
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from db import *
from luhn import *

generating_cards = False

@Client.on_message(filters.command(["gen"], prefixes=["/", "."]))
async def genmass(client, message):
    username = message.from_user.username
    user_id = message.from_user.id

    if len(message.text.split()) < 2:
        await message.reply_text("⎚ Please provide the BIN. Usage: /genmass [BIN]")
        return

    inputm = message.text.split(None, 1)[1]
    BIN = inputm[:6]

    if len(BIN) < 6:
        return await message.reply("<b>⎚ Use <code>/genmass 456789|rnd|rdn|rdn</code></b>")

    req = requests.get(f"https://bins.antipublic.cc/bins/{BIN}").json()

    if 'brand' not in req:
        return await message.reply("⎚ Could not fetch BIN information. Please check the BIN format.")

    brand = req['brand']
    country = req['country']
    country_name = req['country_name']
    country_flag = req['country_flag']
    bank = req['bank']
    level = req['level']
    typea = req['type']

    input = re.findall(r'[0-9]+', message.text)
    
    if len(input) == 1:
        cc, mes, ano, cvv = input[0], 'x', 'x', 'x'
    elif len(input) == 2:
        cc, mes, ano, cvv = input[0], input[1], 'x', 'x'
    elif len(input) == 3:
        cc, mes, ano, cvv = input[0], input[1], input[2], 'x'
    elif len(input) == 4:
        cc, mes, ano, cvv = input[0], input[1], input[2], input[3]
    else:
        cc, mes, ano, cvv = input[0], input[1], input[2], input[3]

    ccs = cc_genmass(cc, mes, ano, cvv)
    buttons = [
        [InlineKeyboardButton("Regen", callback_data="regen")]
    ]
    keyboard = InlineKeyboardMarkup(buttons)

    tiempofinal = time.perf_counter()
    await client.send_message(
        message.chat.id,
        text=f"""
Bin → <code>{BIN}</code>
Amount → 10
━━━━━━━━━━━━━━━━━━
{''.join([f"<code>{cc}</code>" for cc in ccs])}
━━━━━━━━━━━━━━━━━━
Bin Info: <code>{level} -  {typea} [{country_flag}]</code>
Bank: <code>{bank}</code>
Country: <code>{country_name} - {country}</code>
[↯] Generated By <b>@{username}</b>
""",
        reply_markup=keyboard,
        reply_to_message_id=message.id
    )

def luhn_verification(num):
    num = [int(d) for d in str(num)]
    check_digit = num.pop()
    num.reverse()
    total = 0
    for i, digit in enumerate(num):
        if i % 2 == 0:
            digit = digit * 2
        if digit > 9:
            digit = digit - 9
        total += digit
    total = total * 9
    return (total % 10) == check_digit

def cc_genmass(cc, mes='x', ano='x', cvv='x'):
    ccs = []
    while len(ccs) < 10:
        card = str(cc)
        digits = '04567896789'
        list_digits = list(digits)
        random.shuffle(list_digits)
        string_digits = ''.join(list_digits)
        card = card + string_digits
        card = card[:16] if card[0] != '3' else card[:15]

        mes_genmass = mes if mes != 'x' else str(random.randint(1, 12)).zfill(2)
        ano_genmass = ano if ano != 'x' else str(random.randint(2023, 2031))
        cvv_genmass = cvv if cvv != 'x' else random.randint(1000, 9999) if card[0] == '3' else random.randint(100, 999)

        card_info = f"{card}|{mes_genmass}|{ano_genmass}|{cvv_genmass}"
        if luhn_verification(card):
            ccs.append(card_info)
    
    return ccs
